<?xml version="1.0" encoding="utf-8"?>
<TestRun id="4db6f76c-416c-4811-bca7-a6bbb3c4e43d" name="Zair@DESKTOP-H5CMDB4 2021-02-18 18:04:30" runUser="DESKTOP-H5CMDB4\Zair" xmlns="http://microsoft.com/schemas/VisualStudio/TeamTest/2010">
  <Times creation="2021-02-18T18:04:30.1509579+00:00" queuing="2021-02-18T18:04:30.1509593+00:00" start="2021-02-18T18:04:27.4836257+00:00" finish="2021-02-18T18:04:30.5475413+00:00" />
  <TestSettings name="default" id="8e6753b2-896b-4d5c-9b87-0616ba030d4e">
    <Deployment runDeploymentRoot="Zair_DESKTOP-H5CMDB4_2021-02-18_18_04_30" />
  </TestSettings>
  <Results>
    <UnitTestResult executionId="a6df08c1-1382-47d9-8e7e-d9d3aa2b6e82" testId="62ab0eaa-6414-8603-c9ae-47ab61766269" testName="Modulo(&quot;1&quot;,&quot;-1&quot;,&quot;0&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0051500" startTime="2021-02-18T18:04:30.0485579+00:00" endTime="2021-02-18T18:04:30.0537092+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a6df08c1-1382-47d9-8e7e-d9d3aa2b6e82">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter a second input number that is not zero -1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterASecondInputNumberThatIsNotZeroIntoTheCalculator(-1) (0.0s)&#xD;
When I press modulo&#xD;
-&gt; done: CalculatorSteps.WhenIPressModulo() (0.0s)&#xD;
Then the result should be equal to 0&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(0) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9bb5e450-c9c6-49e4-ad75-53527ecbfb57" testId="3b33a3ff-ef38-238b-529b-a6d1cc8c85c4" testName="ModuloCannotDivideByZeroErrorMessage" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0014110" startTime="2021-02-18T18:04:30.0548931+00:00" endTime="2021-02-18T18:04:30.0563037+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9bb5e450-c9c6-49e4-ad75-53527ecbfb57">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a second input number of zero into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterASecondInputNumberOfZeroIntoTheCalculator() (0.0s)&#xD;
When I press modulo&#xD;
-&gt; done: CalculatorSteps.WhenIPressModulo() (0.0s)&#xD;
Then the result should display a division error message&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldDisplayADivisionErrorMessage() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="855353c0-d55f-4afa-ad41-c98abbff5190" testId="7cfd5c20-858c-e729-9033-897264157505" testName="Subtract(&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0019870" startTime="2021-02-18T18:04:30.1446738+00:00" endTime="2021-02-18T18:04:30.1466631+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="855353c0-d55f-4afa-ad41-c98abbff5190">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(1) (0.0s)&#xD;
When I press subtract&#xD;
-&gt; done: CalculatorSteps.WhenIPressSubtract() (0.0s)&#xD;
Then the result should be equal to 0&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(0) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7d6754d8-3791-4ecc-ae86-81dd044260c7" testId="040840f3-64e3-6510-ad4d-6667ac473118" testName="Exponent(&quot;2&quot;,&quot;2&quot;,&quot;4&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0025480" startTime="2021-02-18T18:04:30.0442888+00:00" endTime="2021-02-18T18:04:30.0468377+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7d6754d8-3791-4ecc-ae86-81dd044260c7">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 2 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(2) (0.0s)&#xD;
And I enter any second input number 2 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(2) (0.0s)&#xD;
When I press exponent&#xD;
-&gt; done: CalculatorSteps.WhenIPressExponent() (0.0s)&#xD;
Then the result should be equal to 4&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(4) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="ac69fbdf-d259-478c-bedc-08292c32c7d6" testId="060cbaea-1998-eabc-c46c-4fda9b3a957a" testName="Subtract(&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0016990" startTime="2021-02-18T18:04:30.1409495+00:00" endTime="2021-02-18T18:04:30.1426490+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="ac69fbdf-d259-478c-bedc-08292c32c7d6">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number 0 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(0) (0.0s)&#xD;
When I press subtract&#xD;
-&gt; done: CalculatorSteps.WhenIPressSubtract() (0.0s)&#xD;
Then the result should be equal to 1&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(1) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d1fe89d0-9df3-4331-a84f-0eb1875af80d" testId="442f9e90-9cfa-a2e5-50dd-d769707fe93d" testName="Divide(&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0015460" startTime="2021-02-18T18:04:29.9402864+00:00" endTime="2021-02-18T18:04:29.9418353+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d1fe89d0-9df3-4331-a84f-0eb1875af80d">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter a second input number that is not zero 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterASecondInputNumberThatIsNotZeroIntoTheCalculator(1) (0.0s)&#xD;
When I press divide&#xD;
-&gt; done: CalculatorSteps.WhenIPressDivide() (0.0s)&#xD;
Then the result should be equal to 1&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(1) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="82601f8b-824c-45e1-9092-e969b1b25660" testId="3607f840-cc88-60c2-2ed9-342799ae2877" testName="Exponent(&quot;3&quot;,&quot;2&quot;,&quot;9&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0014750" startTime="2021-02-18T18:04:30.0469143+00:00" endTime="2021-02-18T18:04:30.0483891+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="82601f8b-824c-45e1-9092-e969b1b25660">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 3 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(3) (0.0s)&#xD;
And I enter any second input number 2 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(2) (0.0s)&#xD;
When I press exponent&#xD;
-&gt; done: CalculatorSteps.WhenIPressExponent() (0.0s)&#xD;
Then the result should be equal to 9&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(9) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1f856b2f-f935-4e39-acf2-6643b877a530" testId="e8464b1f-5030-550a-4e99-a581ef53168c" testName="Addition(&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0046920" startTime="2021-02-18T18:04:29.9189490+00:00" endTime="2021-02-18T18:04:29.9236399+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1f856b2f-f935-4e39-acf2-6643b877a530">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number 0 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(0) (0.0s)&#xD;
When I press add&#xD;
-&gt; done: CalculatorSteps.WhenIPressAdd() (0.0s)&#xD;
Then the result should be equal to 1&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(1) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="2467fd06-d19d-4723-8f59-62782d5b8f65" testId="8a46b8cf-27be-9d96-7d1e-1be25f7a648d" testName="Multiply(&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0015020" startTime="2021-02-18T18:04:30.0723094+00:00" endTime="2021-02-18T18:04:30.0738146+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="2467fd06-d19d-4723-8f59-62782d5b8f65">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number 0 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(0) (0.0s)&#xD;
When I press multiply&#xD;
-&gt; done: CalculatorSteps.WhenIPressMultiply() (0.0s)&#xD;
Then the result should be equal to 0&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(0) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="74255f41-2923-43e1-8c30-f6916d204576" testId="ee8915fd-2ccd-8ea4-f544-b3d01c1efe0c" testName="DivideCannotDivideByZeroErrorResult" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0045840" startTime="2021-02-18T18:04:30.0326389+00:00" endTime="2021-02-18T18:04:30.0372265+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="74255f41-2923-43e1-8c30-f6916d204576">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a second input number of zero into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterASecondInputNumberOfZeroIntoTheCalculator() (0.0s)&#xD;
When I press divide&#xD;
-&gt; done: CalculatorSteps.WhenIPressDivide() (0.0s)&#xD;
Then the result should not display a valid number&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldNotDisplayAValidNumber() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c3546e7f-4246-4ce8-ac9f-82531d3d8c1f" testId="1a57df16-ef7e-11ef-2db6-604506c8df14" testName="SquareRoot(&quot;9&quot;,&quot;3&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0008600" startTime="2021-02-18T18:04:30.1173376+00:00" endTime="2021-02-18T18:04:30.1181979+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c3546e7f-4246-4ce8-ac9f-82531d3d8c1f">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number that is zero or positive 9 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberThatIsZeroOrPositiveIntoTheCalculator(9) (0.0s)&#xD;
When I press squareroot&#xD;
-&gt; done: CalculatorSteps.WhenIPressSquareRoot() (0.0s)&#xD;
Then the result should be equal to 3&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(3) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="9865299b-34a5-46aa-9744-078a883f1582" testId="400450c4-728f-0dce-c668-a78ed895077d" testName="SumOfOddNumbers" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0041610" startTime="2021-02-18T18:04:30.1940391+00:00" endTime="2021-02-18T18:04:30.1982020+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="9865299b-34a5-46aa-9744-078a883f1582">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter the numbers below into a list&#xD;
  --- table step argument ---&#xD;
  | numbers |&#xD;
  | 1       |&#xD;
  | 2       |&#xD;
  | 3       |&#xD;
  | 4       |&#xD;
  | 5       |&#xD;
-&gt; done: CalculatorSteps.GivenIEnterTheNumbersBelowIntoAList(&lt;table&gt;) (0.0s)&#xD;
When I iterate through the list to select all odd numbers&#xD;
-&gt; done: CalculatorSteps.WhenIIterateThroughTheListToSelectAllOddNumbers() (0.0s)&#xD;
And I add the selected numbers of the list together&#xD;
-&gt; done: CalculatorSteps.WhenIAddTheSelectedNumbersOfTheListTogether() (0.0s)&#xD;
Then the result should be equal to 9&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(9) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="6cd73001-6a99-4647-acb4-3e6871347bb2" testId="7fa7ff6d-06ff-f1ec-6f50-8360d401f273" testName="SumOfEvenNumbers" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0254780" startTime="2021-02-18T18:04:30.1646254+00:00" endTime="2021-02-18T18:04:30.1901106+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="6cd73001-6a99-4647-acb4-3e6871347bb2">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter the numbers below into a list&#xD;
  --- table step argument ---&#xD;
  | numbers |&#xD;
  | 1       |&#xD;
  | 2       |&#xD;
  | 3       |&#xD;
  | 4       |&#xD;
  | 5       |&#xD;
-&gt; done: CalculatorSteps.GivenIEnterTheNumbersBelowIntoAList(&lt;table&gt;) (0.0s)&#xD;
When I iterate through the list to select all even numbers&#xD;
-&gt; done: CalculatorSteps.WhenIIterateThroughTheListToSelectAllEvenNumbers() (0.0s)&#xD;
And I add the selected numbers of the list together&#xD;
-&gt; done: CalculatorSteps.WhenIAddTheSelectedNumbersOfTheListTogether() (0.0s)&#xD;
Then the result should be equal to 6&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(6) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="50c90960-c261-4833-80b8-a633960bf0dd" testId="46840a2b-3056-4c41-53b0-9e8824a2f15f" testName="ModuloCannotDivideByZeroErrorResult" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0013640" startTime="2021-02-18T18:04:30.0563299+00:00" endTime="2021-02-18T18:04:30.0576939+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="50c90960-c261-4833-80b8-a633960bf0dd">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a second input number of zero into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterASecondInputNumberOfZeroIntoTheCalculator() (0.0s)&#xD;
When I press modulo&#xD;
-&gt; done: CalculatorSteps.WhenIPressModulo() (0.0s)&#xD;
Then the result should not display a valid number&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldNotDisplayAValidNumber() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="58e4cc97-ba47-486b-8feb-329f8d148655" testId="4c05a0d3-a95b-7068-c4e8-d4cb95d820c0" testName="Reciprocal(&quot;-2&quot;,&quot;-0.5&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0014139" startTime="2021-02-18T18:04:30.0869766+00:00" endTime="2021-02-18T18:04:30.0883893+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="58e4cc97-ba47-486b-8feb-329f8d148655">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number that is not zero -2 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberThatIsNotZeroIntoTheCalculator(-2) (0.0s)&#xD;
When I press reciprocal&#xD;
-&gt; done: CalculatorSteps.WhenIPressReciprocal() (0.0s)&#xD;
Then the result should be equal to -0.5&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(-0.5) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="a95556b6-c7ac-4d04-bd67-aacfa2dd332b" testId="9534263a-6863-096c-e037-58664b60eb28" testName="Multiply(&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0013960" startTime="2021-02-18T18:04:30.0745129+00:00" endTime="2021-02-18T18:04:30.0759108+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="a95556b6-c7ac-4d04-bd67-aacfa2dd332b">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(1) (0.0s)&#xD;
When I press multiply&#xD;
-&gt; done: CalculatorSteps.WhenIPressMultiply() (0.0s)&#xD;
Then the result should be equal to 1&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(1) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="b7770ba4-f6a7-42ee-8250-298d9637272e" testId="76491693-85ab-5100-3aa0-a17b845f460a" testName="Addition(&quot;1&quot;,&quot;1&quot;,&quot;2&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0013580" startTime="2021-02-18T18:04:29.9237126+00:00" endTime="2021-02-18T18:04:29.9250710+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="b7770ba4-f6a7-42ee-8250-298d9637272e">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(1) (0.0s)&#xD;
When I press add&#xD;
-&gt; done: CalculatorSteps.WhenIPressAdd() (0.0s)&#xD;
Then the result should be equal to 2&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(2) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d804adc7-d86c-41bb-a522-920c21f4e8e5" testId="72676448-bc79-37f4-6294-5f9a97698e55" testName="SquareRoot(&quot;1&quot;,&quot;1&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0009540" startTime="2021-02-18T18:04:30.1163416+00:00" endTime="2021-02-18T18:04:30.1172960+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d804adc7-d86c-41bb-a522-920c21f4e8e5">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number that is zero or positive 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberThatIsZeroOrPositiveIntoTheCalculator(1) (0.0s)&#xD;
When I press squareroot&#xD;
-&gt; done: CalculatorSteps.WhenIPressSquareRoot() (0.0s)&#xD;
Then the result should be equal to 1&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(1) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0786a28e-7cbc-40ff-b479-ec6662fa2ad9" testId="2c1ee02f-af88-72f0-7e8a-6b1654cb7772" testName="Exponent(&quot;1&quot;,&quot;2&quot;,&quot;1&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0059890" startTime="2021-02-18T18:04:30.0382423+00:00" endTime="2021-02-18T18:04:30.0442333+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0786a28e-7cbc-40ff-b479-ec6662fa2ad9">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number 2 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(2) (0.0s)&#xD;
When I press exponent&#xD;
-&gt; done: CalculatorSteps.WhenIPressExponent() (0.0s)&#xD;
Then the result should be equal to 1&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(1) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d0bca424-9eee-4559-b350-4181833534a2" testId="21d08c16-5534-10b8-5f67-dd9f90a337c8" testName="Reciprocal(&quot;1&quot;,&quot;1&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0070890" startTime="2021-02-18T18:04:30.0786240+00:00" endTime="2021-02-18T18:04:30.0857153+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d0bca424-9eee-4559-b350-4181833534a2">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number that is not zero 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberThatIsNotZeroIntoTheCalculator(1) (0.0s)&#xD;
When I press reciprocal&#xD;
-&gt; done: CalculatorSteps.WhenIPressReciprocal() (0.0s)&#xD;
Then the result should be equal to 1&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(1) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3408ecc0-2a67-4dcc-ac25-b6629199e413" testId="fe5077e0-126f-c2bd-6137-b3ac7ca08be7" testName="Addition(&quot;1&quot;,&quot;-1&quot;,&quot;0&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.1216750" startTime="2021-02-18T18:04:29.7932684+00:00" endTime="2021-02-18T18:04:29.9147465+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3408ecc0-2a67-4dcc-ac25-b6629199e413">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number -1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(-1) (0.0s)&#xD;
When I press add&#xD;
-&gt; done: CalculatorSteps.WhenIPressAdd() (0.0s)&#xD;
Then the result should be equal to 0&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(0) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="3164200a-93ae-4a3a-b82e-06a4ccaf1805" testId="f896a2e1-42f4-0d6d-571b-0029d264c2ea" testName="Modulo(&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0010900" startTime="2021-02-18T18:04:30.0537595+00:00" endTime="2021-02-18T18:04:30.0548501+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="3164200a-93ae-4a3a-b82e-06a4ccaf1805">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter a second input number that is not zero 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterASecondInputNumberThatIsNotZeroIntoTheCalculator(1) (0.0s)&#xD;
When I press modulo&#xD;
-&gt; done: CalculatorSteps.WhenIPressModulo() (0.0s)&#xD;
Then the result should be equal to 0&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(0) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="0b1a5dbd-02d2-4f82-95fe-666b9c07eff3" testId="215496cb-a941-ed56-3a93-7d73b1cfdfdf" testName="Multiply(&quot;1&quot;,&quot;-1&quot;,&quot;-1&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0105470" startTime="2021-02-18T18:04:30.0577437+00:00" endTime="2021-02-18T18:04:30.0682919+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="0b1a5dbd-02d2-4f82-95fe-666b9c07eff3">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number -1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(-1) (0.0s)&#xD;
When I press multiply&#xD;
-&gt; done: CalculatorSteps.WhenIPressMultiply() (0.0s)&#xD;
Then the result should be equal to -1&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(-1) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="d73482bf-62a9-451a-ad4d-9d65f0f92a81" testId="c607082f-2e0d-fdc0-2cca-b08501d51d86" testName="Divide(&quot;1&quot;,&quot;-1&quot;,&quot;-1&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0060089" startTime="2021-02-18T18:04:29.9302084+00:00" endTime="2021-02-18T18:04:29.9362184+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="d73482bf-62a9-451a-ad4d-9d65f0f92a81">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter a second input number that is not zero -1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterASecondInputNumberThatIsNotZeroIntoTheCalculator(-1) (0.0s)&#xD;
When I press divide&#xD;
-&gt; done: CalculatorSteps.WhenIPressDivide() (0.0s)&#xD;
Then the result should be equal to -1&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(-1) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="cfe8579f-5349-42d5-b230-6937eb072395" testId="92344ea4-5961-d95f-71e8-11b871745c3d" testName="ReciprocalCannotDivideByZeroErrorResult" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0025730" startTime="2021-02-18T18:04:30.0921532+00:00" endTime="2021-02-18T18:04:30.0947267+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="cfe8579f-5349-42d5-b230-6937eb072395">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number of zero into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberOfZeroIntoTheCalculator() (0.0s)&#xD;
When I press reciprocal&#xD;
-&gt; done: CalculatorSteps.WhenIPressReciprocal() (0.0s)&#xD;
Then the result should not display a valid number&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldNotDisplayAValidNumber() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="92e6ce67-5253-49bb-9e09-b98bcedf1b90" testId="c61881e7-54b5-62a2-7b25-4de579ad179c" testName="ReciprocalCannotDivideByZeroErrorMessage" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0036490" startTime="2021-02-18T18:04:30.0884601+00:00" endTime="2021-02-18T18:04:30.0921093+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="92e6ce67-5253-49bb-9e09-b98bcedf1b90">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number of zero into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberOfZeroIntoTheCalculator() (0.0s)&#xD;
When I press reciprocal&#xD;
-&gt; done: CalculatorSteps.WhenIPressReciprocal() (0.0s)&#xD;
Then the result should display a division error message&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldDisplayADivisionErrorMessage() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="7739d3e1-779e-4b2b-a25b-8e71d59f17d0" testId="8f65ac51-ca70-9747-1c08-a9e37612f1e7" testName="SquareRootCannotAcceptNegativeNumbersErrorResult" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0028420" startTime="2021-02-18T18:04:30.1303246+00:00" endTime="2021-02-18T18:04:30.1331692+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="7739d3e1-779e-4b2b-a25b-8e71d59f17d0">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number that is negative -1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberThatIsNegativeIntoTheCalculator(-1) (0.0s)&#xD;
When I press squareroot&#xD;
-&gt; done: CalculatorSteps.WhenIPressSquareRoot() (0.0s)&#xD;
Then the result should not display a valid number&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldNotDisplayAValidNumber() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="c1497c33-21d7-402a-9737-afc0856555ea" testId="8ec8ea03-78f5-004b-7e30-18c3ba70d79b" testName="SquareRoot(&quot;0&quot;,&quot;0&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0208260" startTime="2021-02-18T18:04:30.0954663+00:00" endTime="2021-02-18T18:04:30.1162959+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="c1497c33-21d7-402a-9737-afc0856555ea">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number that is zero or positive 0 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberThatIsZeroOrPositiveIntoTheCalculator(0) (0.0s)&#xD;
When I press squareroot&#xD;
-&gt; done: CalculatorSteps.WhenIPressSquareRoot() (0.0s)&#xD;
Then the result should be equal to 0&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(0) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="4f9746e7-d507-4646-b85c-f77f27814f47" testId="b0c7be46-824d-da49-483c-e7e655aa0e8f" testName="Subtract(&quot;1&quot;,&quot;-1&quot;,&quot;2&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0035700" startTime="2021-02-18T18:04:30.1348283+00:00" endTime="2021-02-18T18:04:30.1384001+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="4f9746e7-d507-4646-b85c-f77f27814f47">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number -1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(-1) (0.0s)&#xD;
When I press subtract&#xD;
-&gt; done: CalculatorSteps.WhenIPressSubtract() (0.0s)&#xD;
Then the result should be equal to 2&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(2) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="1ac37070-af58-4776-8b6b-eba3b5b785fc" testId="b39dcce1-bcbe-8990-4f3e-0cb9f34f5b69" testName="SquareRootCannotAcceptNegativeNumbersErrorMessage" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0086930" startTime="2021-02-18T18:04:30.1182666+00:00" endTime="2021-02-18T18:04:30.1269599+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="1ac37070-af58-4776-8b6b-eba3b5b785fc">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number that is negative -1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberThatIsNegativeIntoTheCalculator(-1) (0.0s)&#xD;
When I press squareroot&#xD;
-&gt; done: CalculatorSteps.WhenIPressSquareRoot() (0.0s)&#xD;
Then the result should display an argument error message&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldDisplayAnArgumentErrorMessage() (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="21653cd2-9010-46d4-9a65-9b335c7e9e43" testId="f2498993-9900-0c54-7e60-a9dc56124816" testName="DivideCannotDivideByZeroErrorMessage" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0879190" startTime="2021-02-18T18:04:29.9422968+00:00" endTime="2021-02-18T18:04:30.0302323+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="21653cd2-9010-46d4-9a65-9b335c7e9e43">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a second input number of zero into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterASecondInputNumberOfZeroIntoTheCalculator() (0.0s)&#xD;
When I press divide&#xD;
-&gt; done: CalculatorSteps.WhenIPressDivide() (0.0s)&#xD;
Then the result should display a division error message&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldDisplayADivisionErrorMessage() (0.1s)</StdOut>
      </Output>
    </UnitTestResult>
    <UnitTestResult executionId="f9e59023-9741-42ab-ac80-623520d57dd5" testId="22988a10-e856-1642-1e88-9b91939c24b8" testName="Reciprocal(&quot;2&quot;,&quot;0.5&quot;,null)" computerName="DESKTOP-H5CMDB4" duration="00:00:00.0010830" startTime="2021-02-18T18:04:30.0857569+00:00" endTime="2021-02-18T18:04:30.0868401+00:00" testType="13cdc9d9-ddb5-4fa4-a97d-d965ccfc6d4b" outcome="Passed" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" relativeResultsDirectory="f9e59023-9741-42ab-ac80-623520d57dd5">
      <Output>
        <StdOut>Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number that is not zero 2 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberThatIsNotZeroIntoTheCalculator(2) (0.0s)&#xD;
When I press reciprocal&#xD;
-&gt; done: CalculatorSteps.WhenIPressReciprocal() (0.0s)&#xD;
Then the result should be equal to 0.5&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(0.5) (0.0s)</StdOut>
      </Output>
    </UnitTestResult>
  </Results>
  <TestDefinitions>
    <UnitTest name="ReciprocalCannotDivideByZeroErrorResult" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="92344ea4-5961-d95f-71e8-11b871745c3d">
      <Execution id="cfe8579f-5349-42d5-b230-6937eb072395" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="ReciprocalCannotDivideByZeroErrorResult" />
    </UnitTest>
    <UnitTest name="Reciprocal(&quot;2&quot;,&quot;0.5&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="22988a10-e856-1642-1e88-9b91939c24b8">
      <Execution id="f9e59023-9741-42ab-ac80-623520d57dd5" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Reciprocal(&quot;2&quot;,&quot;0.5&quot;,null)" />
    </UnitTest>
    <UnitTest name="Reciprocal(&quot;1&quot;,&quot;1&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="21d08c16-5534-10b8-5f67-dd9f90a337c8">
      <Execution id="d0bca424-9eee-4559-b350-4181833534a2" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Reciprocal(&quot;1&quot;,&quot;1&quot;,null)" />
    </UnitTest>
    <UnitTest name="Exponent(&quot;2&quot;,&quot;2&quot;,&quot;4&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="040840f3-64e3-6510-ad4d-6667ac473118">
      <Execution id="7d6754d8-3791-4ecc-ae86-81dd044260c7" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Exponent(&quot;2&quot;,&quot;2&quot;,&quot;4&quot;,null)" />
    </UnitTest>
    <UnitTest name="SumOfOddNumbers" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="400450c4-728f-0dce-c668-a78ed895077d">
      <Execution id="9865299b-34a5-46aa-9744-078a883f1582" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="SumOfOddNumbers" />
    </UnitTest>
    <UnitTest name="Subtract(&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="7cfd5c20-858c-e729-9033-897264157505">
      <Execution id="855353c0-d55f-4afa-ad41-c98abbff5190" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Subtract(&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,null)" />
    </UnitTest>
    <UnitTest name="Multiply(&quot;1&quot;,&quot;-1&quot;,&quot;-1&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="215496cb-a941-ed56-3a93-7d73b1cfdfdf">
      <Execution id="0b1a5dbd-02d2-4f82-95fe-666b9c07eff3" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Multiply(&quot;1&quot;,&quot;-1&quot;,&quot;-1&quot;,null)" />
    </UnitTest>
    <UnitTest name="SumOfEvenNumbers" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="7fa7ff6d-06ff-f1ec-6f50-8360d401f273">
      <Execution id="6cd73001-6a99-4647-acb4-3e6871347bb2" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="SumOfEvenNumbers" />
    </UnitTest>
    <UnitTest name="SquareRoot(&quot;1&quot;,&quot;1&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="72676448-bc79-37f4-6294-5f9a97698e55">
      <Execution id="d804adc7-d86c-41bb-a522-920c21f4e8e5" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="SquareRoot(&quot;1&quot;,&quot;1&quot;,null)" />
    </UnitTest>
    <UnitTest name="Divide(&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="442f9e90-9cfa-a2e5-50dd-d769707fe93d">
      <Execution id="d1fe89d0-9df3-4331-a84f-0eb1875af80d" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Divide(&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,null)" />
    </UnitTest>
    <UnitTest name="Multiply(&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="9534263a-6863-096c-e037-58664b60eb28">
      <Execution id="a95556b6-c7ac-4d04-bd67-aacfa2dd332b" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Multiply(&quot;1&quot;,&quot;1&quot;,&quot;1&quot;,null)" />
    </UnitTest>
    <UnitTest name="Reciprocal(&quot;-2&quot;,&quot;-0.5&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="4c05a0d3-a95b-7068-c4e8-d4cb95d820c0">
      <Execution id="58e4cc97-ba47-486b-8feb-329f8d148655" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Reciprocal(&quot;-2&quot;,&quot;-0.5&quot;,null)" />
    </UnitTest>
    <UnitTest name="DivideCannotDivideByZeroErrorResult" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="ee8915fd-2ccd-8ea4-f544-b3d01c1efe0c">
      <Execution id="74255f41-2923-43e1-8c30-f6916d204576" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="DivideCannotDivideByZeroErrorResult" />
    </UnitTest>
    <UnitTest name="ReciprocalCannotDivideByZeroErrorMessage" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="c61881e7-54b5-62a2-7b25-4de579ad179c">
      <Execution id="92e6ce67-5253-49bb-9e09-b98bcedf1b90" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="ReciprocalCannotDivideByZeroErrorMessage" />
    </UnitTest>
    <UnitTest name="Modulo(&quot;1&quot;,&quot;-1&quot;,&quot;0&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="62ab0eaa-6414-8603-c9ae-47ab61766269">
      <Execution id="a6df08c1-1382-47d9-8e7e-d9d3aa2b6e82" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Modulo(&quot;1&quot;,&quot;-1&quot;,&quot;0&quot;,null)" />
    </UnitTest>
    <UnitTest name="SquareRoot(&quot;0&quot;,&quot;0&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="8ec8ea03-78f5-004b-7e30-18c3ba70d79b">
      <Execution id="c1497c33-21d7-402a-9737-afc0856555ea" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="SquareRoot(&quot;0&quot;,&quot;0&quot;,null)" />
    </UnitTest>
    <UnitTest name="Modulo(&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="f896a2e1-42f4-0d6d-571b-0029d264c2ea">
      <Execution id="3164200a-93ae-4a3a-b82e-06a4ccaf1805" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Modulo(&quot;1&quot;,&quot;1&quot;,&quot;0&quot;,null)" />
    </UnitTest>
    <UnitTest name="Multiply(&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="8a46b8cf-27be-9d96-7d1e-1be25f7a648d">
      <Execution id="2467fd06-d19d-4723-8f59-62782d5b8f65" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Multiply(&quot;1&quot;,&quot;0&quot;,&quot;0&quot;,null)" />
    </UnitTest>
    <UnitTest name="Subtract(&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="060cbaea-1998-eabc-c46c-4fda9b3a957a">
      <Execution id="ac69fbdf-d259-478c-bedc-08292c32c7d6" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Subtract(&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,null)" />
    </UnitTest>
    <UnitTest name="Addition(&quot;1&quot;,&quot;-1&quot;,&quot;0&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="fe5077e0-126f-c2bd-6137-b3ac7ca08be7">
      <Execution id="3408ecc0-2a67-4dcc-ac25-b6629199e413" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Addition(&quot;1&quot;,&quot;-1&quot;,&quot;0&quot;,null)" />
    </UnitTest>
    <UnitTest name="Divide(&quot;1&quot;,&quot;-1&quot;,&quot;-1&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="c607082f-2e0d-fdc0-2cca-b08501d51d86">
      <Execution id="d73482bf-62a9-451a-ad4d-9d65f0f92a81" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Divide(&quot;1&quot;,&quot;-1&quot;,&quot;-1&quot;,null)" />
    </UnitTest>
    <UnitTest name="Exponent(&quot;3&quot;,&quot;2&quot;,&quot;9&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="3607f840-cc88-60c2-2ed9-342799ae2877">
      <Execution id="82601f8b-824c-45e1-9092-e969b1b25660" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Exponent(&quot;3&quot;,&quot;2&quot;,&quot;9&quot;,null)" />
    </UnitTest>
    <UnitTest name="Addition(&quot;1&quot;,&quot;1&quot;,&quot;2&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="76491693-85ab-5100-3aa0-a17b845f460a">
      <Execution id="b7770ba4-f6a7-42ee-8250-298d9637272e" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Addition(&quot;1&quot;,&quot;1&quot;,&quot;2&quot;,null)" />
    </UnitTest>
    <UnitTest name="DivideCannotDivideByZeroErrorMessage" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="f2498993-9900-0c54-7e60-a9dc56124816">
      <Execution id="21653cd2-9010-46d4-9a65-9b335c7e9e43" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="DivideCannotDivideByZeroErrorMessage" />
    </UnitTest>
    <UnitTest name="Addition(&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="e8464b1f-5030-550a-4e99-a581ef53168c">
      <Execution id="1f856b2f-f935-4e39-acf2-6643b877a530" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Addition(&quot;1&quot;,&quot;0&quot;,&quot;1&quot;,null)" />
    </UnitTest>
    <UnitTest name="SquareRootCannotAcceptNegativeNumbersErrorMessage" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="b39dcce1-bcbe-8990-4f3e-0cb9f34f5b69">
      <Execution id="1ac37070-af58-4776-8b6b-eba3b5b785fc" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="SquareRootCannotAcceptNegativeNumbersErrorMessage" />
    </UnitTest>
    <UnitTest name="ModuloCannotDivideByZeroErrorResult" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="46840a2b-3056-4c41-53b0-9e8824a2f15f">
      <Execution id="50c90960-c261-4833-80b8-a633960bf0dd" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="ModuloCannotDivideByZeroErrorResult" />
    </UnitTest>
    <UnitTest name="Exponent(&quot;1&quot;,&quot;2&quot;,&quot;1&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="2c1ee02f-af88-72f0-7e8a-6b1654cb7772">
      <Execution id="0786a28e-7cbc-40ff-b479-ec6662fa2ad9" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Exponent(&quot;1&quot;,&quot;2&quot;,&quot;1&quot;,null)" />
    </UnitTest>
    <UnitTest name="Subtract(&quot;1&quot;,&quot;-1&quot;,&quot;2&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="b0c7be46-824d-da49-483c-e7e655aa0e8f">
      <Execution id="4f9746e7-d507-4646-b85c-f77f27814f47" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="Subtract(&quot;1&quot;,&quot;-1&quot;,&quot;2&quot;,null)" />
    </UnitTest>
    <UnitTest name="SquareRoot(&quot;9&quot;,&quot;3&quot;,null)" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="1a57df16-ef7e-11ef-2db6-604506c8df14">
      <Execution id="c3546e7f-4246-4ce8-ac9f-82531d3d8c1f" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="SquareRoot(&quot;9&quot;,&quot;3&quot;,null)" />
    </UnitTest>
    <UnitTest name="ModuloCannotDivideByZeroErrorMessage" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="3b33a3ff-ef38-238b-529b-a6d1cc8c85c4">
      <Execution id="9bb5e450-c9c6-49e4-ad75-53527ecbfb57" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="ModuloCannotDivideByZeroErrorMessage" />
    </UnitTest>
    <UnitTest name="SquareRootCannotAcceptNegativeNumbersErrorResult" storage="c:\users\zair\documents\employment\spartaglobal\projects\bdd-calculator\bddcalculator\bddcalculator\bin\debug\netcoreapp3.1\bddcalculator.dll" id="8f65ac51-ca70-9747-1c08-a9e37612f1e7">
      <Execution id="7739d3e1-779e-4b2b-a25b-8e71d59f17d0" />
      <TestMethod codeBase="C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll" adapterTypeName="executor://nunit3testexecutor/" className="BDDCalculator.CalculatorFeature" name="SquareRootCannotAcceptNegativeNumbersErrorResult" />
    </UnitTest>
  </TestDefinitions>
  <TestEntries>
    <TestEntry testId="62ab0eaa-6414-8603-c9ae-47ab61766269" executionId="a6df08c1-1382-47d9-8e7e-d9d3aa2b6e82" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3b33a3ff-ef38-238b-529b-a6d1cc8c85c4" executionId="9bb5e450-c9c6-49e4-ad75-53527ecbfb57" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7cfd5c20-858c-e729-9033-897264157505" executionId="855353c0-d55f-4afa-ad41-c98abbff5190" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="040840f3-64e3-6510-ad4d-6667ac473118" executionId="7d6754d8-3791-4ecc-ae86-81dd044260c7" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="060cbaea-1998-eabc-c46c-4fda9b3a957a" executionId="ac69fbdf-d259-478c-bedc-08292c32c7d6" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="442f9e90-9cfa-a2e5-50dd-d769707fe93d" executionId="d1fe89d0-9df3-4331-a84f-0eb1875af80d" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="3607f840-cc88-60c2-2ed9-342799ae2877" executionId="82601f8b-824c-45e1-9092-e969b1b25660" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="e8464b1f-5030-550a-4e99-a581ef53168c" executionId="1f856b2f-f935-4e39-acf2-6643b877a530" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8a46b8cf-27be-9d96-7d1e-1be25f7a648d" executionId="2467fd06-d19d-4723-8f59-62782d5b8f65" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="ee8915fd-2ccd-8ea4-f544-b3d01c1efe0c" executionId="74255f41-2923-43e1-8c30-f6916d204576" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="1a57df16-ef7e-11ef-2db6-604506c8df14" executionId="c3546e7f-4246-4ce8-ac9f-82531d3d8c1f" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="400450c4-728f-0dce-c668-a78ed895077d" executionId="9865299b-34a5-46aa-9744-078a883f1582" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="7fa7ff6d-06ff-f1ec-6f50-8360d401f273" executionId="6cd73001-6a99-4647-acb4-3e6871347bb2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="46840a2b-3056-4c41-53b0-9e8824a2f15f" executionId="50c90960-c261-4833-80b8-a633960bf0dd" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="4c05a0d3-a95b-7068-c4e8-d4cb95d820c0" executionId="58e4cc97-ba47-486b-8feb-329f8d148655" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="9534263a-6863-096c-e037-58664b60eb28" executionId="a95556b6-c7ac-4d04-bd67-aacfa2dd332b" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="76491693-85ab-5100-3aa0-a17b845f460a" executionId="b7770ba4-f6a7-42ee-8250-298d9637272e" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="72676448-bc79-37f4-6294-5f9a97698e55" executionId="d804adc7-d86c-41bb-a522-920c21f4e8e5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="2c1ee02f-af88-72f0-7e8a-6b1654cb7772" executionId="0786a28e-7cbc-40ff-b479-ec6662fa2ad9" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="21d08c16-5534-10b8-5f67-dd9f90a337c8" executionId="d0bca424-9eee-4559-b350-4181833534a2" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="fe5077e0-126f-c2bd-6137-b3ac7ca08be7" executionId="3408ecc0-2a67-4dcc-ac25-b6629199e413" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f896a2e1-42f4-0d6d-571b-0029d264c2ea" executionId="3164200a-93ae-4a3a-b82e-06a4ccaf1805" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="215496cb-a941-ed56-3a93-7d73b1cfdfdf" executionId="0b1a5dbd-02d2-4f82-95fe-666b9c07eff3" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c607082f-2e0d-fdc0-2cca-b08501d51d86" executionId="d73482bf-62a9-451a-ad4d-9d65f0f92a81" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="92344ea4-5961-d95f-71e8-11b871745c3d" executionId="cfe8579f-5349-42d5-b230-6937eb072395" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="c61881e7-54b5-62a2-7b25-4de579ad179c" executionId="92e6ce67-5253-49bb-9e09-b98bcedf1b90" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8f65ac51-ca70-9747-1c08-a9e37612f1e7" executionId="7739d3e1-779e-4b2b-a25b-8e71d59f17d0" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="8ec8ea03-78f5-004b-7e30-18c3ba70d79b" executionId="c1497c33-21d7-402a-9737-afc0856555ea" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b0c7be46-824d-da49-483c-e7e655aa0e8f" executionId="4f9746e7-d507-4646-b85c-f77f27814f47" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="b39dcce1-bcbe-8990-4f3e-0cb9f34f5b69" executionId="1ac37070-af58-4776-8b6b-eba3b5b785fc" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="f2498993-9900-0c54-7e60-a9dc56124816" executionId="21653cd2-9010-46d4-9a65-9b335c7e9e43" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestEntry testId="22988a10-e856-1642-1e88-9b91939c24b8" executionId="f9e59023-9741-42ab-ac80-623520d57dd5" testListId="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
  </TestEntries>
  <TestLists>
    <TestList name="Results Not in a List" id="8c84fa94-04c1-424b-9868-57a2d4851a1d" />
    <TestList name="All Loaded Results" id="19431567-8539-422a-85d7-44ee4e166bda" />
  </TestLists>
  <ResultSummary outcome="Completed">
    <Counters total="32" executed="32" passed="32" failed="0" error="0" timeout="0" aborted="0" inconclusive="0" passedButRunAborted="0" notRunnable="0" notExecuted="0" disconnected="0" warning="0" completed="0" inProgress="0" pending="0" />
    <Output>
      <StdOut>NUnit Adapter 3.17.0.0: Test execution started&#xD;
Running all tests in C:\Users\Zair\Documents\Employment\SpartaGlobal\Projects\BDD-Calculator\BDDCalculator\BDDCalculator\bin\Debug\netcoreapp3.1\BDDCalculator.dll&#xD;
   NUnit3TestExecutor discovered 32 of 32 NUnit test cases&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number -1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(-1) (0.0s)&#xD;
When I press add&#xD;
-&gt; done: CalculatorSteps.WhenIPressAdd() (0.0s)&#xD;
Then the result should be equal to 0&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(0) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number 0 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(0) (0.0s)&#xD;
When I press add&#xD;
-&gt; done: CalculatorSteps.WhenIPressAdd() (0.0s)&#xD;
Then the result should be equal to 1&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(1) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(1) (0.0s)&#xD;
When I press add&#xD;
-&gt; done: CalculatorSteps.WhenIPressAdd() (0.0s)&#xD;
Then the result should be equal to 2&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(2) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter a second input number that is not zero -1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterASecondInputNumberThatIsNotZeroIntoTheCalculator(-1) (0.0s)&#xD;
When I press divide&#xD;
-&gt; done: CalculatorSteps.WhenIPressDivide() (0.0s)&#xD;
Then the result should be equal to -1&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(-1) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter a second input number that is not zero 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterASecondInputNumberThatIsNotZeroIntoTheCalculator(1) (0.0s)&#xD;
When I press divide&#xD;
-&gt; done: CalculatorSteps.WhenIPressDivide() (0.0s)&#xD;
Then the result should be equal to 1&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(1) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a second input number of zero into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterASecondInputNumberOfZeroIntoTheCalculator() (0.0s)&#xD;
When I press divide&#xD;
-&gt; done: CalculatorSteps.WhenIPressDivide() (0.0s)&#xD;
Then the result should display a division error message&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldDisplayADivisionErrorMessage() (0.1s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a second input number of zero into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterASecondInputNumberOfZeroIntoTheCalculator() (0.0s)&#xD;
When I press divide&#xD;
-&gt; done: CalculatorSteps.WhenIPressDivide() (0.0s)&#xD;
Then the result should not display a valid number&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldNotDisplayAValidNumber() (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number 2 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(2) (0.0s)&#xD;
When I press exponent&#xD;
-&gt; done: CalculatorSteps.WhenIPressExponent() (0.0s)&#xD;
Then the result should be equal to 1&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(1) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 2 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(2) (0.0s)&#xD;
And I enter any second input number 2 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(2) (0.0s)&#xD;
When I press exponent&#xD;
-&gt; done: CalculatorSteps.WhenIPressExponent() (0.0s)&#xD;
Then the result should be equal to 4&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(4) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 3 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(3) (0.0s)&#xD;
And I enter any second input number 2 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(2) (0.0s)&#xD;
When I press exponent&#xD;
-&gt; done: CalculatorSteps.WhenIPressExponent() (0.0s)&#xD;
Then the result should be equal to 9&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(9) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter a second input number that is not zero -1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterASecondInputNumberThatIsNotZeroIntoTheCalculator(-1) (0.0s)&#xD;
When I press modulo&#xD;
-&gt; done: CalculatorSteps.WhenIPressModulo() (0.0s)&#xD;
Then the result should be equal to 0&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(0) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter a second input number that is not zero 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterASecondInputNumberThatIsNotZeroIntoTheCalculator(1) (0.0s)&#xD;
When I press modulo&#xD;
-&gt; done: CalculatorSteps.WhenIPressModulo() (0.0s)&#xD;
Then the result should be equal to 0&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(0) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a second input number of zero into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterASecondInputNumberOfZeroIntoTheCalculator() (0.0s)&#xD;
When I press modulo&#xD;
-&gt; done: CalculatorSteps.WhenIPressModulo() (0.0s)&#xD;
Then the result should display a division error message&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldDisplayADivisionErrorMessage() (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a second input number of zero into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterASecondInputNumberOfZeroIntoTheCalculator() (0.0s)&#xD;
When I press modulo&#xD;
-&gt; done: CalculatorSteps.WhenIPressModulo() (0.0s)&#xD;
Then the result should not display a valid number&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldNotDisplayAValidNumber() (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number -1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(-1) (0.0s)&#xD;
When I press multiply&#xD;
-&gt; done: CalculatorSteps.WhenIPressMultiply() (0.0s)&#xD;
Then the result should be equal to -1&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(-1) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number 0 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(0) (0.0s)&#xD;
When I press multiply&#xD;
-&gt; done: CalculatorSteps.WhenIPressMultiply() (0.0s)&#xD;
Then the result should be equal to 0&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(0) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(1) (0.0s)&#xD;
When I press multiply&#xD;
-&gt; done: CalculatorSteps.WhenIPressMultiply() (0.0s)&#xD;
Then the result should be equal to 1&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(1) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number that is not zero 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberThatIsNotZeroIntoTheCalculator(1) (0.0s)&#xD;
When I press reciprocal&#xD;
-&gt; done: CalculatorSteps.WhenIPressReciprocal() (0.0s)&#xD;
Then the result should be equal to 1&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(1) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number that is not zero 2 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberThatIsNotZeroIntoTheCalculator(2) (0.0s)&#xD;
When I press reciprocal&#xD;
-&gt; done: CalculatorSteps.WhenIPressReciprocal() (0.0s)&#xD;
Then the result should be equal to 0.5&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(0.5) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number that is not zero -2 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberThatIsNotZeroIntoTheCalculator(-2) (0.0s)&#xD;
When I press reciprocal&#xD;
-&gt; done: CalculatorSteps.WhenIPressReciprocal() (0.0s)&#xD;
Then the result should be equal to -0.5&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(-0.5) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number of zero into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberOfZeroIntoTheCalculator() (0.0s)&#xD;
When I press reciprocal&#xD;
-&gt; done: CalculatorSteps.WhenIPressReciprocal() (0.0s)&#xD;
Then the result should display a division error message&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldDisplayADivisionErrorMessage() (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number of zero into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberOfZeroIntoTheCalculator() (0.0s)&#xD;
When I press reciprocal&#xD;
-&gt; done: CalculatorSteps.WhenIPressReciprocal() (0.0s)&#xD;
Then the result should not display a valid number&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldNotDisplayAValidNumber() (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number that is zero or positive 0 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberThatIsZeroOrPositiveIntoTheCalculator(0) (0.0s)&#xD;
When I press squareroot&#xD;
-&gt; done: CalculatorSteps.WhenIPressSquareRoot() (0.0s)&#xD;
Then the result should be equal to 0&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(0) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number that is zero or positive 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberThatIsZeroOrPositiveIntoTheCalculator(1) (0.0s)&#xD;
When I press squareroot&#xD;
-&gt; done: CalculatorSteps.WhenIPressSquareRoot() (0.0s)&#xD;
Then the result should be equal to 1&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(1) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number that is zero or positive 9 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberThatIsZeroOrPositiveIntoTheCalculator(9) (0.0s)&#xD;
When I press squareroot&#xD;
-&gt; done: CalculatorSteps.WhenIPressSquareRoot() (0.0s)&#xD;
Then the result should be equal to 3&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(3) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number that is negative -1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberThatIsNegativeIntoTheCalculator(-1) (0.0s)&#xD;
When I press squareroot&#xD;
-&gt; done: CalculatorSteps.WhenIPressSquareRoot() (0.0s)&#xD;
Then the result should display an argument error message&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldDisplayAnArgumentErrorMessage() (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter a first input number that is negative -1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAFirstInputNumberThatIsNegativeIntoTheCalculator(-1) (0.0s)&#xD;
When I press squareroot&#xD;
-&gt; done: CalculatorSteps.WhenIPressSquareRoot() (0.0s)&#xD;
Then the result should not display a valid number&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldNotDisplayAValidNumber() (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number -1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(-1) (0.0s)&#xD;
When I press subtract&#xD;
-&gt; done: CalculatorSteps.WhenIPressSubtract() (0.0s)&#xD;
Then the result should be equal to 2&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(2) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number 0 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(0) (0.0s)&#xD;
When I press subtract&#xD;
-&gt; done: CalculatorSteps.WhenIPressSubtract() (0.0s)&#xD;
Then the result should be equal to 1&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(1) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter any first input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnyFirstInputNumberIntoTheCalculator(1) (0.0s)&#xD;
And I enter any second input number 1 into the calculator&#xD;
-&gt; done: CalculatorSteps.GivenIEnterAnySecondInputNumberIntoTheCalculator(1) (0.0s)&#xD;
When I press subtract&#xD;
-&gt; done: CalculatorSteps.WhenIPressSubtract() (0.0s)&#xD;
Then the result should be equal to 0&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(0) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter the numbers below into a list&#xD;
  --- table step argument ---&#xD;
  | numbers |&#xD;
  | 1       |&#xD;
  | 2       |&#xD;
  | 3       |&#xD;
  | 4       |&#xD;
  | 5       |&#xD;
-&gt; done: CalculatorSteps.GivenIEnterTheNumbersBelowIntoAList(&lt;table&gt;) (0.0s)&#xD;
When I iterate through the list to select all even numbers&#xD;
-&gt; done: CalculatorSteps.WhenIIterateThroughTheListToSelectAllEvenNumbers() (0.0s)&#xD;
And I add the selected numbers of the list together&#xD;
-&gt; done: CalculatorSteps.WhenIAddTheSelectedNumbersOfTheListTogether() (0.0s)&#xD;
Then the result should be equal to 6&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(6) (0.0s)&#xD;
&#xD;
Given I have a calculator&#xD;
-&gt; done: CalculatorSteps.GivenIHaveACalculator() (0.0s)&#xD;
And I enter the numbers below into a list&#xD;
  --- table step argument ---&#xD;
  | numbers |&#xD;
  | 1       |&#xD;
  | 2       |&#xD;
  | 3       |&#xD;
  | 4       |&#xD;
  | 5       |&#xD;
-&gt; done: CalculatorSteps.GivenIEnterTheNumbersBelowIntoAList(&lt;table&gt;) (0.0s)&#xD;
When I iterate through the list to select all odd numbers&#xD;
-&gt; done: CalculatorSteps.WhenIIterateThroughTheListToSelectAllOddNumbers() (0.0s)&#xD;
And I add the selected numbers of the list together&#xD;
-&gt; done: CalculatorSteps.WhenIAddTheSelectedNumbersOfTheListTogether() (0.0s)&#xD;
Then the result should be equal to 9&#xD;
-&gt; done: CalculatorSteps.ThenTheResultShouldBeEqualTo(9) (0.0s)&#xD;
&#xD;
NUnit Adapter 3.17.0.0: Test execution complete&#xD;
</StdOut>
    </Output>
  </ResultSummary>
</TestRun>